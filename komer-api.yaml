openapi: 3.0.1
info:
  title: Reipes API
  description: This is a simple Recipes API
  contact:
    email: you@your-company.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers:
  - description: Localhost server for testing API
    url: http://localhost:1904/api
tags:
- name: recipes
- name: groups
- name: users

paths:
  /recipes:
    get:
      tags:
      - recipes
      summary: Gets the most popular recipes
      description: Gets the most popular recipes
      operationId: getPopRecipes
      responses:
        200:
          description: Fetched the most popular recipes
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example:  715424
                  title:
                    type: string
                    example: "The Best Chili"
                  image:
                    type: string
                    example: "https://spoonacular.com/recipeImages/715424-312x231.jpg"
                  imageType:
                    type: string
                    example: "jpg"
  /games:
    get:
      tags:
      - games
      summary: Get games
      description: By passing in the appropriate options, you can search for available games
      operationId: getGames
      security:
        - bearerAuth: []
      parameters:
      - name: Authorization
        in: header
        required: false
        schema:
          type: string
          format: uuid
      - name: searchString
        in: query
        description: pass an optional search string for looking up games with that  text
        schema:
          type: string
      - name: skip
        in: query
        description: number of records to skip for pagination
        schema:
          minimum: 0
          type: integer
      - name: limit
        in: query
        description: maximum number of records to return
        schema:
          maximum: 50
          minimum: 0
          type: integer
      responses:
        200:
          description: search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Game'
        400:
          description: bad input parameter
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequest'
    post:
      tags:
      - games
      summary: adds a game
      description: Adds a game to the system
      operationId: addGame
      security:
        - bearerAuth: []
      parameters:
      - name: Authorization
        in: header
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        description: Game to add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewGame'
        required: false
      responses:
        201:
          description: Game created
          content: {}
        400:
          description: Invalid input, object invalid
          content: {}
      x-codegen-request-body-name: game
  /recipes/word:
    get:
      tags:
      - recipes
      summary: Gets recipes by word
      description: Gets all the recipes that have the word passed as a paremeter in their title
      operationId: getRecipesWithWord
      parameters:
      - name: Word
        in: body
        required: true
        schema:
          type: object
          properties: 
            word: 
              type: string
              example: Spicy
      responses:
        200:
          description: Recipes successfully fetched
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 715419
                  title:
                    type: string
                    example: "Slow Cooker Spicy Hot Wings"
                  image:
                    type: string
                    example: "https://spoonacular.com/recipeImages/715419-312x231.jpg"
                  imageType:
                    type: string
                    example: "jpg"
        404:
          description: There are no recipes that includes given word
          content: 
            application/json:
              schema:
                  type: object
                  properties: 
                    error:
                      type: "string"
                      example: "Not Found"
  /groups:
    put:
      tags:
      - groups
      summary: Creates a new group
      description: Creates a new group with the parameters passed in the body
      operationId: createGroup
      parameters:
      - name: name
        in: body
        required: true
        schema:
          type: object
          properties: 
            name: 
              type: string
              example: Group3
      - name: description
        in: body
        required: true
        schema:
          type: object
          properties: 
            description:
              type: string
              example: Description of Group3
      responses:
        200:
          description: Group successfully created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 3
                  name:
                    type: string
                    example: "Group3"
                  description:
                    type: string
                    example: "Description of Group3"
                  recipes:
                    type: array
                    example: []
        400:
          description: One of the parameters is wrongfully passed
          content: 
            application/json:
              schema:
                  type: object
                  properties: 
                    error:
                      type: "string"
                      example: "Invalid {parameter}"
    get:
      tags:
      - groups
      summary: Gets all groups
      description: Gets all groups
      operationId: getAllGroups
      responses:
        200:
          description: Successfully got all groups
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example:  3
                  name:
                    type: string
                    example: "Group3"
                  description:
                    type: string
                    example: Description of Group3
                  recipes:
                    type: array
                    example: []
        404:
          description: There are no groups to get
          content: 
            application/json:
              schema:
                  type: object
                  properties: 
                    error:
                      type: "string"
                      example: "There are no groups"
    delete:
      tags: 
      - groups
      summary: Deletes a group
      description: Deletes the group with id equal to the one passed as a parameter in the body
      operationId: deleteGroup
      parameters:
      - name: id
        in: body
        required: true
        schema:
          type: object
          properties: 
            id: 
              type: integer
              example: 3
      responses:
        200:
          description: Successfully deleted the group
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example:  3
                  name:
                    type: string
                    example: "Group3"
                  description:
                    type: string
                    example: Description of Group3
                  recipes:
                    type: array
                    example: []
        404:
          description: There is no group with such id
          content: 
            application/json:
              schema:
                  type: object
                  properties: 
                    error:
                      type: "string"
                      example: "Not Found"
  /groups/edit:
    put:
      tags:
      - groups
      summary: Edits group's parameters
      description: Edits groups's parameters to the one's passed as parameters
      operationId: editGroup
      parameters:
      - name: id
        in: body
        required: true
        schema:
          type: object
          properties: 
            id: 
              type: integer
              example: 1
      - name: name
        in: body
        required: true
        schema:
          type: object
          properties: 
            name: 
              type: string
              example: new name for Group1
      - name: description
        in: body
        required: true
        schema:
          type: object
          properties: 
            description: 
              type: string
              example: new description for Group1
      responses:
        200:
          description: Group successfully created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                  name:
                    type: string
                    example: new name for Group1
                  description:
                    type: string
                    example: new description for Group1
                  recipes:
                    type: array
                    example: []
        400:
          description: One of the parameters is wrongfully passed
          content: 
            application/json:
              schema:
                  type: object
                  properties: 
                    error:
                      type: "string"
                      example: "Invalid {parameter}"

components:
  securitySchemes:
    bearerAuth:           
      type: http
      scheme: bearer
  schemas:
    Game:
      required:
      - id
      - text
      - userId
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Fifa
        description:
          type: string
          example: Fifa game description
        userId:
          type: integer
    NewGame:
      required:
      - name
      - userId
      type: object
      properties:
        name:
          type: string
          example: Fifa
        description:
          type: string
          example: Fifa game description
        userId:
          type: integer
    NewUser:
      required:
      - userName
      type: object
      properties:
        userName:
          type: string
          example: joao
    InvalidRequest:
      type: object
      properties:
        cause:
          type: string
          example: "Missing required parameter"