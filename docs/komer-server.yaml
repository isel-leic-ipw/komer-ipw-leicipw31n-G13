openapi: 3.0.1
info:
  title: Recipes API 
  description: This is a simple Recipes API
  contact:
    email: you@your-company.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers:
  - description: Localhost server for testing API
    url: http://localhost:8080/api

tags:
- name: recipes
- name: group
- name: users

paths:
  /poprecipes:
    get:
      tags:
      - recipes
      summary: get popular recipes
      description: By passing in the appropriate options, you can search for most popular recipes
      operationId: getPopRecipes
      security:
        - bearerAuth: []
      parameters:
      - name: Authorization
        in: header
        required: false
        schema:
          type: string
          format: uuid
      - name: searchString
        in: query
        description: pass an optional search string for looking up popular recipes with that text
        schema:
          type: string
      - name: skip
        in: query
        description: number of records to skip for pagination
        schema:
          minimum: 0
          type: integer
      - name: limit
        in: query
        description: maximum number of records to return
        schema:
          maximum: 50
          minimum: 0
          type: integer
      responses:
        200:
          description: search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PopRecipes'
        400:
          description: bad input parameter
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequest'
  /recipes/{recipesWords}:
    get:
      tags:
      - recipes
      summary: Get some recipes given some words on the title of the recipe
      description: Get some recipes given some words on the title of the recipe
      operationId: getRecipeByWords
      security:
        - bearerAuth: []
      parameters:
      - name: Authorization
        in: header
        schema:
          type: string
          format: uuid
      - name: recipesWords
        in: path
        description: Some words of the tilte of the recipes to be fetched
        required: true
        schema:
          type: integer
          minimum: 1
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecipesWords'
        400:
          description: Invalid Words supplied
          content: 
            application/json:
              schema: 
                type: string
                example: Invalid words supplied
        404:
          description: Recipe not found
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/InvalidRequest'
                example: Recipe Not found
  /group:
    get:
      tags:
      - group
      summary: gets all groups
      description: gets all groups in the system
      operationId: getGroup
      security:
        - bearerAuth: []
      parameters:
        - name: Authorization
          in: header
          required: false
          schema:
            type: string
            format: uuid  
      responses:
        201:
          description: search results
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Groups'
        404:
          description: Game not found
          content: {}
    put:
      tags:
      - group
      summary: updates a group
      description: Updates a group in the system
      operationId: updateGroup
      security:
        - bearerAuth: []
      parameters:
      - name: Authorization
        in: header
        required: true
        schema:
          type: string
          format: uuid
      - name: groupId
        in: path
        description: ID of the group to be update
        required: true
        schema:
          type: integer
      requestBody:
        description: Group to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Groups'
        required: false
      responses:
        201:
          description: Group updated
          content: {}
        404:
          description: Group not found
          content: {}
    delete:
      tags:
      - group
      summary: Delete a group by it's ID
      description: Delete a group  by it's ID
      operationId: deleteGroup
      security:
        - bearerAuth: []
      parameters:
      - name: Authorization
        in: header
        required: true
        schema:
          type: string
          format: uuid
      - name: gameId
        in: path
        description: ID of the game to be deleted
        required: true
        schema:
          type: integer
      responses:
        200:
          description: Group deleted successfully
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Group not found
          content: {}
    post:
      tags:
      - group
      summary: Creates a group
      description: Creates a group in the system
      operationId: createGroup
      parameters:
      - name: groupId
        in: path
        description: ID of the group to be created
        required: true
        schema:
          type: integer
      - name: groupName
        in: path
        description: Name of the group to be created
        required: true
        schema:
          type: string
      - name: groupDescription
        in: path
        description: Description of the group to be created
        required: true
        schema:
          type: string    
      requestBody:
        description: Group to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateGroup'
        required: false
      responses:
        200:
          description: group created
          content:
            application/json:
              schema:
                required:
                - name
                - description
                type: object
                properties:
                  name:
                    type: string
                    example: Group of sweet recipes
                  description:
                    type: string
                    example: In this group there are the sweetest recipes  
        400:
          description: Invalid input, object invalid
          content: {}
      x-codegen-request-body-name: group
  /users:
    post:
      tags:
      - users
      summary: adds a user
      description: Adds a user to the system
      operationId: addUser
      parameters:
      - name: userId
        in: path
        description: ID of the user to be created
        required: true
        schema:
          type: integer
      - name: userName
        in: path
        description: Name of the user to be created
        required: true
        schema:
          type: string
      requestBody:
        description: User to add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUser'
        required: false
      responses:
        201:
          description: user created
          content:
            application/json:
              schema:
                required:
                - userID
                - userName
                type: object
                properties:
                  userID:
                    type: integer
                    example: 1904
                  userName:
                    type: string
                    example: Tiago  
        400:
          description: Invalid input, object invalid
          content: {}
      x-codegen-request-body-name: user
components:
  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
  schemas:
    PopRecipes:
      type: object
      properties:
        id:
          type: integer
          example: 38
        title:
          type: string
          example: The best Tiramisu  
    NewGame:
      required:
      - name
      - userId
      type: object
      properties:
        name:
          type: string
          example: Fifa
        description:
          type: string
          example: Fifa game description
        userId:
          type: integer
    NewUser:
      required:
      - userName
      - userID
      type: object
      properties:
        userId:
          type: integer
          example: 1904
        userName:
          type: string
          example: Tiago    
    RecipesWords:
      required:
      - words
      type: object
      properties:
        id:
          type: integer
          example: 1904
        title:
          type: string
          example: Pasta with tuna  
    CreateGroup:
      required:
      - groupName
      - groupDescription
      type: object
      properties:
        name:
          type: string
          example: Sweet Recipes
        description:
          type: string
          example: Group of sweet recipes
    Groups:
      type: object
      properties:
        GroupID:
          type: integer
          example: 88
        GroupName:
          type: string
          example: Group of sweet recipes
        GroupDescription:
          type: string
          example: In this group there are the sweetest recipes         
    InvalidRequest:
      type: object
      properties:
        cause:
          type: string
          example: "Missing required parameter"
